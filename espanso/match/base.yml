# espanso match file

# For a complete introduction, visit the official docs at: https://espanso.org/docs/

# You can use this file to define the base matches (aka snippets)
# that will be available in every application when using espanso.

# Matches are substitution rules: when you type the "trigger" string
# it gets replaced by the "replace" string.
matches:
  # Simple text replacement
  - trigger: ";tr"
    replace: |-
      - trigger: ""
        replace: |-
  - trigger: ";cargo/"
    replace: "/Users/jharcombe/.cargo/bin/"
  - trigger: ";plspls"
    replace: ":pleading::point_right::point_left:"
  - trigger: ";tableflip"
    replace: "(╯°□°)╯彡▔▔▏"
  - trigger: ";bigtableflip"
    replace: ":tableflip-1::tableflip-2::tableflip-3::tableflip-4::tableflip-5::tableflip-6::tableflip-7::tableflip-8:"
  - trigger: ";removed"
    replace: |-
      :removed1::removed2::removed3::removed4::removed5::removed6::removed7:
  - trigger: ";nbsp"
    replace: " "
  - trigger: ";zwsp"
    replace: "​"

  # chrome
  - trigger: ";bm"
    replace: "@bookmarks"

  # mac
  - trigger: ";users"
    replace: |-
      /usr/bin/stat -f "%Su" /dev/console
  - trigger: ";isadmin"
    replace: |-
      dscl . read /groups/admin | grep ^GroupMembership | grep -E ' $(/usr/bin/stat -f "%Su" /dev/console")( |\$)'
  - trigger: ";addadmin"
    replace: |-
      sudo dseditgroup -o edit -a $(/usr/bin/stat -f "%Su" /dev/console") -t user admin
  - trigger: ";removeadmin"
    replace: |-
      sudo dseditgroup -o edit -d $(/usr/bin/stat -f "%Su" /dev/console") -t user admin
  - trigger: ";psgrep"
    replace: 'ps aux | grep $|$ | grep -v "grep .*$*"'
  - trigger: ";~"
    replace: |-
      /Users/$(/usr/bin/stat -f "%Su" /dev/console)/

  # misc
  - trigger: ";downloads"
    replace: |-
      (await chrome.downloads.search({limit: 0})).sort((a,b) => Date.parse(b.endTime) - Date.parse(a.endTime))

  # code
  - trigger: ";interact"
    replace: "__import__('code').interact(local=dict(globals(), **locals()))"
  - trigger: ";ds"
    replace: |-
      document.querySelector("$|$")
  - trigger: ";we"
    replace: |-
      waitForElm("$|$").then(([elm]) =>
  - trigger: ";nav"
    replace: |-
      navigation.addEventListener("navigate", $|$);
  - trigger: ";waitforelm"
    replace: |
      function waitForElm(selector) {
        return new Promise((resolve) => {
          if (document.querySelector(selector)) {
            return resolve(document.querySelectorAll(selector));
          }

          const observer = new MutationObserver((_mutations) => {
            if (document.querySelector(selector)) {
              observer.disconnect();
              resolve(document.querySelectorAll(selector));
            }
          });

          // If you get "parameter 1 is not of type 'Node'" error, see https://stackoverflow.com/a/77855838/492336
          observer.observe(document.body, {
            childList: true,
            subtree: true,
          });
        });
      }

  # NOTE: espanso uses YAML to define matches, so pay attention to the indentation!

  # But matches can also be dynamic:

  # Print the current date
  # - trigger: ";date"
  #   replace: "{{mydate}}"
  #   vars:
  #     - name: mydate
  #       type: date
  #       params:
  #         format: "%m/%d/%Y"

  # Print the output of a shell command
  # - trigger: ";shell"
  #   replace: "{{output}}"
  #   vars:
  #     - name: output
  #       type: shell
  #       params:
  #         cmd: "echo 'Hello from your shell'"

  # And much more! For more information, visit the docs: https://espanso.org/docs/

  # - trigger: ":file"
  #   replace: "{{form1.file}}"
  #   vars:
  #     - name: files
  #       type: shell
  #       params:
  #         cmd: "find ~/Documents -maxdepth 1"
  #     - name: form1
  #       type: form
  #       params:
  #         layout: |
  #           Select file:
  #           [[file]]
  #         fields:
  #           file:
  #             type: list
  #             values: "{{files}}"
